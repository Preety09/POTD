
Input:
{xs,ys} = {0,0}
{xd,yd} = {1,8}
matrix = 1 1 1 1 1 1 1 1 1 1
         1 1 0 1 1 0 1 1 0 1
         1 1 1 1 1 1 1 1 1 1
Output: 24


 

class Solution {
public:
void find(vector<vector<int>> matrix,vector<vector<int>>v,int i, int j, int xd, int yd,int n,int m,int sum,int &ma)
{ 
    if(i==xd && j==yd)
    { 
        if(sum>ma)
        
        ma=sum;
        return;
        
    }
    if(i<n && i>=0 && j>=0 && j<m && v[i][j]==-1 && matrix[i][j]!=0)
    { 
        v[i][j]=1;
        find(matrix,v,i+1,j,xd,yd,n,m,sum+1,ma);
        find(matrix,v,i-1,j,xd,yd,n,m,sum+1,ma);
        find(matrix,v,i,j+1,xd,yd,n,m,sum+1,ma);
        find(matrix,v,i,j-1,xd,yd,n,m,sum+1,ma);
        v[i][j]=-1;
        
        
    }
}
    int longestPath(vector<vector<int>> matrix, int xs, int ys, int xd, int yd)
    { 
        if(matrix[xs][ys]==0 || matrix[xd][yd]==0)
        return -1;
        //vector<int>v;
        int ma=-1;
        int n=matrix.size();
        int m=matrix[0].size();
        vector<vector<int>>v(n,vector<int>(m,-1));
        find(matrix,v,xs,ys,xd,yd,n,m,0,ma);
        if(ma!=-1)
        return ma;
        else 
        return -1;
        // code here
    }
};
